<?php

namespace Jobeet\FrontendBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * JobRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class JobRepository extends EntityRepository
{
	public function addActiveJobsQ($q = null)
	{
		if (!$q) $q = $this->createQueryBuilder('j');
		$q
			->andWhere('j.expiresAt > :expires')
			->andWhere('j.isActivated = :active')
			->orderBy('j.createdAt','DESC')
			->setParameter('expires',date('Y-m-d H:i:s',time()))
			->setParameter('active',true);
		return $q;
	}
	
	public function getJobHistory($recent_jobs)
	{
		$q = $this->createQueryBuilder('j');
		foreach ($recent_jobs as $i => $job_id)
		{
			$q->orWhere('j.id = ?'.$i)->setParameter($i,$job_id);
		}
		return $q->getQuery()->getResult();
	}
	
	public function generateToken($from)
	{
		$token = sha1($from.rand(1111,9999));
		$existing_tokens = $this->getTokens();
		while (in_array($token, $existing_tokens))
		{
			$token = sha1($token);
		}
		return $token;
	}
	
	protected function getTokens()
	{
		$tokens = $this->createQueryBuilder('j')->select('j.token')->getQuery()->getResult();
		$tokens_array = array();
		foreach ($tokens as $t)
		{
			$tokens_array[] = $t['token'];
		}
		return $tokens_array;
	}
	
	public function getLatestJob()
	{
		$q = $this->addActiveJobsQ();
		$job = $q->getQuery()->setMaxResults(1)->getResult();
		return $job[0];
	}
	
	public function getLatestJobDate()
	{
		$job = $this->getLatestJob();
		return $job->getCreatedAt();
	}
	
	public function getLatestProgrammingJob()
	{
		$q = $this->addActiveJobsQ()
			->leftJoin('j.category','c')
			->andWhere('c.slug = :slug')
			->setParameter('slug','programming');
		$job = $q->getQuery()->setMaxResults(1)->getResult();
		return $job[0];
	}
	
	public function getExpiredJob()
	{
		$q = $this->createQueryBuilder('j')
			->where('j.position = :pos')
			->setParameter('pos','expired');
		$job = $q->getQuery()->getResult();
		return $job[0];
	}
	
	public function findJobsById($ids)
	{
		$q = $this->createQueryBuilder('j');
		foreach ($ids as $i => $job_id)
		{
			$q->orWhere('j.id = ?'.$i)->setParameter($i,$job_id);
		}
		$q = $this->addActiveJobsQ($q)->getQuery()->setMaxResults(20);
		return $q->getResult();
		
	}
	
	public function getActiveJobsForApi($category,$limit)
	{
		$q = $this->addActiveJobsQ()
			->andWhere('j.isPublic = :public')
			->setParameter('public',true)
			->leftJoin('j.category','c')
			->andWhere('c.name IN (:cat)')
			->setParameter('cat',$category);
		$q = $q->getQuery();
		// Ha a limit esetleg 0, akkor sem tesszük bele
		if ($limit != false) $q->setMaxResults($limit);
		
		return $q->getResult();
	}

}