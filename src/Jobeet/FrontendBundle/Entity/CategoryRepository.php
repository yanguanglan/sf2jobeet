<?php

namespace Jobeet\FrontendBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends EntityRepository
{
	public function getWithActiveJobs()
	{
		$q = $this->createQueryBuilder('c')
			->leftJoin('c.jobs','j');
		$q = $this->_em->getRepository('JobeetFrontendBundle:Job')->AddactiveJobsQ($q);
		return $q->getQuery()->getResult();
	}
	
	public function getActiveJobsForCategory($category)
	{
		// _em: mert akkor nem lesz benne a kérésben a FROM category rész, és jó eredményeket kapunk
		$q = $this->_em->createQueryBuilder()
			->select('j')
			->from('JobeetFrontendBundle:Job','j')
			->leftJoin('j.category','c')
			->where('c.id = :category')
			->setParameter('category',$category->getId());
		$q = $this->_em->getRepository('JobeetFrontendBundle:Job')->AddActiveJobsQ($q);
		return $q->getQuery();
	}
	
	public function getLimitedActiveJobs($category,$limit = 10)
	{
		$q = $this->getActiveJobsForCategory($category);
		$q->setMaxResults($limit);
		return $q->getResult();
	}
	
	public function countActiveJobs($category)
	{
		$q = $this->getActiveJobsForCategory($category);
		return count($q->getResult());
	}
	
	public function getPaginatedActiveJobs($category,$page,$limit)
	{
		$offset = ($page - 1)*$limit;
		$q = $this->getActiveJobsForCategory($category);
		$q->setFirstResult($offset)->setMaxResults($limit);
		return $q->getResult();
	}
}